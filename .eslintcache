[{"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/index.tsx":"1","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/reportWebVitals.ts":"2","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/App.tsx":"3","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/createTask/CreateTask.tsx":"4","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/creationForm/CreationForm.tsx":"5","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-board/task-board.tsx":"6","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-card/TaskCard.tsx":"7","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-details-page/TaskDetailsPage.tsx":"8","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/services/TaskService.ts":"9","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/http-common.ts":"10","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/login/Login.tsx":"11","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/services/AuthServices.ts":"12","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/services/authHeader.ts":"13"},{"size":638,"mtime":1611002542013,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1610039699599,"results":"16","hashOfConfig":"15"},{"size":587,"mtime":1611686142666,"results":"17","hashOfConfig":"15"},{"size":939,"mtime":1610658620488,"results":"18","hashOfConfig":"15"},{"size":1924,"mtime":1611595024170,"results":"19","hashOfConfig":"15"},{"size":5591,"mtime":1611595024160,"results":"20","hashOfConfig":"15"},{"size":1190,"mtime":1611591887811,"results":"21","hashOfConfig":"15"},{"size":999,"mtime":1611595024170,"results":"22","hashOfConfig":"15"},{"size":605,"mtime":1611348314148,"results":"23","hashOfConfig":"15"},{"size":174,"mtime":1611686659120,"results":"24","hashOfConfig":"15"},{"size":2180,"mtime":1611687389379,"results":"25","hashOfConfig":"15"},{"size":649,"mtime":1611687979628,"results":"26","hashOfConfig":"15"},{"size":220,"mtime":1611686659120,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ot7ish",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/index.tsx",[],["58","59"],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/reportWebVitals.ts",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/App.tsx",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/createTask/CreateTask.tsx",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/creationForm/CreationForm.tsx",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-board/task-board.tsx",["60","61","62"],"import React, { useEffect, useState } from 'react';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport CreatTask from '../createTask/CreateTask'\nimport TaskCard from '../task-card/TaskCard'\nimport { v4 as uuid } from 'uuid';\nimport '../task-board/task-board.css'\nimport TaskService from '../../services/TaskService';\n\n\nconst taskService = TaskService()\nconst mockTasks = [\n  { id: 3, taskTitle: 'Test', text: 'This is just a test1' },\n  { id: 4, taskTitle: 'Test2', text: 'This is just a test2' }\n]\nconst mockedColumns = {\n  new: {\n    name: 'New',\n    status: 'NEW',\n    items: []\n  },\n  inprogress: {\n    name: 'In Progress',\n    status: 'INPROGRESS',\n    items: []\n  }\n  ,\n  inqa: {\n    name: 'In QA',\n    status: 'INQA',\n    items: []\n  }\n  ,\n  completed: {\n    name: 'Completed',\n    status: 'COMPLETED',\n    items: []\n  }\n}\n\n\n\nconst TaskBoard = () => {\n\n  const [tasks, setTasks] = useState([]);\n  const [columns, setColumns] = useState(mockedColumns);\n  const [refresh, setRefresh] = useState(true)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    if (refresh) {\n      setRefresh(false);\n      fetchData();\n    }\n  }, [refresh])\n\n  const fetchData = () => {\n    taskService.retrieveAllTasks().then((response) => {\n      setTasks(response.data);\n      let tempColumns = columns;\n      for (const [status, backEndTask] of Object.entries(response.data)) {\n        if (tempColumns[status.toLowerCase()]) {\n          tempColumns[status.toLowerCase()].items = backEndTask;\n        }\n      }\n      setColumns(tempColumns);\n      setLoading(false);\n    });\n  }\n\n\n\n  function addNewTask(inputs) {\n    const newTask = {\n      id: +uuid(),\n      taskTitle: inputs.taskTitle,\n      description: inputs.description,\n      status: inputs.status,\n      taskDetail: {}\n    }\n\n    taskService.createTask(newTask);\n    setLoading(true);\n    setRefresh(true);\n  }\n\n  function onDragEnd(result, columns, setColumns) {\n    if (!result.destination) {\n      return;\n    }\n    const { source, destination } = result;\n    if (source.droppableId !== destination.droppableId) {\n      const sourceColumn = columns[source.droppableId];\n      const destColumn = columns[destination.droppableId];\n      const sourceItems = [...sourceColumn.items];\n      const destItems = [...destColumn.items];\n      const [removed] = sourceItems.splice(source.index, 1);\n      destItems.splice(destination.index, 0, removed);\n      setColumns({\n        ...columns,\n        [source.droppableId]: {\n          ...sourceColumn,\n          items: sourceItems\n        },\n        [destination.droppableId]: {\n          ...destColumn,\n          items: destItems\n        }\n      })\n    } else {\n      const column = columns[source.droppableId];\n      const copiedItems = [...column.items];\n      const [removed] = copiedItems.splice(source.index, 1);\n      copiedItems.splice(destination.index, 0, removed);\n      setColumns({\n        ...columns,\n        [source.droppableId]: {\n          ...column,\n          items: copiedItems\n        },\n      })\n    }\n\n  }\n\n  if (!loading) {\n    return (\n      <div className=\"mainPage\">\n        <CreatTask onParentClick={addNewTask} />\n        <DragDropContext onDragEnd={result => onDragEnd(result, columns, setColumns)}>\n          {Object.entries(columns).map(([id, column]) => {\n            return (\n              <div className=\"title\">\n                <h2>{column.name}</h2>\n                <div style={{ margin: 8 }}>\n                  <Droppable droppableId={id.toString()} key={id}>\n                    {(provided, snapshot) => {\n                      return (\n                        <div\n                          {...provided.droppableProps}\n                          ref={provided.innerRef}\n                          style={{\n                            background: snapshot.isDraggingOver ? 'lightblue' : 'lightgrey',\n                            padding: 4,\n                            width: 250,\n                            minHeight: 500\n                          }}>\n                          {(column.items as any[]).map((item, index) => {\n                            return (\n                              <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\n                                {(provided, snapshot) => {\n                                  return (\n                                    <div className=\"taskDisplay\" ref={provided.innerRef}\n                                      {...provided.draggableProps}\n                                      {...provided.dragHandleProps}\n                                      style={{\n                                        userSelect: 'none',\n                                        // backgroundColor: snapshot.isDragging ? '#263B4A' : '#456C86',\n                                        ...provided.draggableProps.style\n                                      }}>\n                                      <TaskCard item={item} column={column.name} key={item.id}></TaskCard>\n                                    </div>\n                                  )\n                                }}\n                              </Draggable>\n                            )\n                          })}\n                          {provided.placeholder}\n                        </div>\n                      )\n                    }}\n                  </Droppable>\n                </div>\n              </div>\n            )\n          })}\n        </DragDropContext>\n      </div>\n    );\n  } else {\n    return (\n      <p>Loading....</p>\n    )\n    \n  }\n\n\n\n}\n\nexport default TaskBoard","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-card/TaskCard.tsx",["63","64"],"import { useEffect, useState } from 'react'\nimport Card from 'react-bootstrap/Card'\nimport '../task-card/TaskCard.css'\n\nconst TaskCard = ({ item, column }) => {\n\n\n    function determinColumnColor(): string {\n        let color = '';\n        switch (column) {\n            case 'New':\n                color = 'primary'\n                break;\n            case 'In Progress':\n                color = 'danger'\n                break;\n            case 'In QA':\n                color = 'warning'\n                break;\n            default:\n                color = 'success'\n                break;\n        }\n        return color;\n    }\n\n    return (\n        <Card bg={determinColumnColor()} text='white' className=\"taskCard\">\n            <Card.Body>\n                <Card.Title>{item.taskTitle}</Card.Title>\n                {/* <Card.Subtitle className=\"mb-2\">{item.subTitle}</Card.Subtitle> */}\n                <Card.Text>\n                    {item.description}\n                </Card.Text>\n                {item.taskDetail && item.taskDetail.id && (<Card.Link href={`/details/${item.taskDetail.id}`}>More Detail</Card.Link>)}\n            </Card.Body>\n        </Card>\n    )\n}\nexport default TaskCard","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-details-page/TaskDetailsPage.tsx",["65"],"import { useEffect, useState } from \"react\"\nimport TaskService from \"../../services/TaskService\"\n\n\nconst taskService = TaskService();\n\nconst TaskDetailPage = ({match:{params:{id}}}) => {\n\n    const [taskDetail, setTaskDetail] = useState({\n        id: null,\n        acceptanceCriteria: ''\n    })\n    const [loading, setLoading] = useState(true)\n\n\n    useEffect(() => {\n        getTaskDetailById(id);\n    }, [])\n\n    function getTaskDetailById(id){\n        taskService.retrieveTaskDetailById(id).then((response) => {\n            if(response && response.data) {\n                setTaskDetail(response.data);\n                setLoading(false);\n            }\n        })\n    }\n\n    if(!loading) {\n        return (\n            <div>\n                <h1>HELLO, This is the basic acceptance Criteria Page</h1>\n                <p>{taskDetail.acceptanceCriteria}</p>\n            </div>\n        )\n    } else {\n        return (\n            <p>Loading.....</p>\n        )\n    }\n    \n}\nexport default TaskDetailPage","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/services/TaskService.ts",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/http-common.ts",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/login/Login.tsx",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/services/AuthServices.ts",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/services/authHeader.ts",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":11,"column":7,"nodeType":"72","messageId":"73","endLine":11,"endColumn":16},{"ruleId":"70","severity":1,"message":"74","line":44,"column":10,"nodeType":"72","messageId":"73","endLine":44,"endColumn":15},{"ruleId":"75","severity":1,"message":"76","line":54,"column":6,"nodeType":"77","endLine":54,"endColumn":15,"suggestions":"78"},{"ruleId":"70","severity":1,"message":"79","line":1,"column":10,"nodeType":"72","messageId":"73","endLine":1,"endColumn":19},{"ruleId":"70","severity":1,"message":"80","line":1,"column":21,"nodeType":"72","messageId":"73","endLine":1,"endColumn":29},{"ruleId":"75","severity":1,"message":"81","line":18,"column":8,"nodeType":"77","endLine":18,"endColumn":10,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"@typescript-eslint/no-unused-vars","'mockTasks' is assigned a value but never used.","Identifier","unusedVar","'tasks' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["85"],"'useEffect' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["86"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},"Update the dependencies array to be: [fetchData, refresh]",{"range":"91","text":"92"},"Update the dependencies array to be: [id]",{"range":"93","text":"94"},[1181,1190],"[fetchData, refresh]",[406,408],"[id]"]