[{"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/index.tsx":"1","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/reportWebVitals.ts":"2","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/App.tsx":"3","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/createTask/CreateTask.tsx":"4","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/creationForm/CreationForm.tsx":"5","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-board/task-board.tsx":"6","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-card/TaskCard.tsx":"7"},{"size":547,"mtime":1610054742396,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1610039699599,"results":"10","hashOfConfig":"9"},{"size":194,"mtime":1610473963184,"results":"11","hashOfConfig":"9"},{"size":939,"mtime":1610658620488,"results":"12","hashOfConfig":"9"},{"size":2125,"mtime":1610569834692,"results":"13","hashOfConfig":"9"},{"size":4633,"mtime":1610657965108,"results":"14","hashOfConfig":"9"},{"size":955,"mtime":1610658531616,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"ot7ish",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/index.tsx",[],["32","33"],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/reportWebVitals.ts",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/App.tsx",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/createTask/CreateTask.tsx",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/creationForm/CreationForm.tsx",["34"],"import React, { useState } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport { useForm } from \"react-hook-form\";\nimport {v4 as uuid} from 'uuid';\n\n\nconst CreationForm = ({onChildClick}) => {\n    const { register, handleSubmit, errors } = useForm();\n    const [task, setTask] = useState({\n        id: '',\n        title: '',\n        subTitle: '',\n        text: ''\n    })\n\n    function onSubmit(){\n        onChildClick(task);\n    }\n\n    function handleInputChange(e){\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n\n        setTask(task => ({\n            ...task,\n            [name]:value\n        }))\n    }\n\n    return (\n        <Form onSubmit={handleSubmit(onSubmit)}>\n            <Form.Group controlId=\"formTitle\">\n                <Form.Label>Title</Form.Label>\n                <Form.Control onChange={handleInputChange} name=\"title\" ref={register({ required: true })}  value={task.title} type=\"text\" placeholder=\"Enter Title of Task\"></Form.Control>\n                {errors.title && <span>This field is required</span>}\n            </Form.Group>\n\n            <Form.Group controlId=\"formSubTitle\">\n                <Form.Label>SubTitle</Form.Label>\n                <Form.Control onChange={handleInputChange} name=\"subTitle\" ref={register({ required: true })}  value={task.subTitle} type=\"text\" placeholder=\"Enter SubTitle of Task\"></Form.Control>\n                {errors.subTitle && <span>This field is required</span>}\n            </Form.Group>\n            \n            <Form.Group controlId=\"formDescription\">\n                <Form.Label>Task Description</Form.Label>\n                <Form.Control onChange={handleInputChange} name=\"text\" ref={register({ required: true })}  value={task.text} type=\"text\" placeholder=\"Enter Task Description\"></Form.Control>\n                {errors.description && <span>This field is required</span>}\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n                Creat Task\n            </Button>\n        </Form>\n    )\n}\n\nexport default CreationForm","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-board/task-board.tsx",["35"],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-card/TaskCard.tsx",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":5,"column":15,"nodeType":"42","messageId":"43","endLine":5,"endColumn":19},{"ruleId":"44","severity":1,"message":"45","line":51,"column":9,"nodeType":"46","messageId":"47","endLine":54,"endColumn":10,"fix":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"@typescript-eslint/no-unused-vars","'uuid' is defined but never used.","Identifier","unusedVar","no-useless-computed-key","Unnecessarily computed property ['new'] found.","Property","unnecessarilyComputedProperty",{"range":"51","text":"52"},"no-global-assign","no-unsafe-negation",[1226,1233],"'new'"]