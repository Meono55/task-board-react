[{"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/index.tsx":"1","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/reportWebVitals.ts":"2","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/App.tsx":"3","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/createTask/CreateTask.tsx":"4","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/creationForm/CreationForm.tsx":"5","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-board/task-board.tsx":"6","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-card/TaskCard.tsx":"7","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-details-page/TaskDetailsPage.tsx":"8"},{"size":547,"mtime":1610054742396,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1610039699599,"results":"11","hashOfConfig":"10"},{"size":492,"mtime":1610661319280,"results":"12","hashOfConfig":"10"},{"size":939,"mtime":1610658620488,"results":"13","hashOfConfig":"10"},{"size":2125,"mtime":1610569834692,"results":"14","hashOfConfig":"10"},{"size":4633,"mtime":1610657965108,"results":"15","hashOfConfig":"10"},{"size":1071,"mtime":1610661553651,"results":"16","hashOfConfig":"10"},{"size":170,"mtime":1610661445503,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ot7ish",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/index.tsx",[],["37","38"],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/reportWebVitals.ts",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/App.tsx",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/createTask/CreateTask.tsx",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/creationForm/CreationForm.tsx",["39"],"import React, { useState } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport { useForm } from \"react-hook-form\";\nimport {v4 as uuid} from 'uuid';\n\n\nconst CreationForm = ({onChildClick}) => {\n    const { register, handleSubmit, errors } = useForm();\n    const [task, setTask] = useState({\n        id: '',\n        title: '',\n        subTitle: '',\n        text: ''\n    })\n\n    function onSubmit(){\n        onChildClick(task);\n    }\n\n    function handleInputChange(e){\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n\n        setTask(task => ({\n            ...task,\n            [name]:value\n        }))\n    }\n\n    return (\n        <Form onSubmit={handleSubmit(onSubmit)}>\n            <Form.Group controlId=\"formTitle\">\n                <Form.Label>Title</Form.Label>\n                <Form.Control onChange={handleInputChange} name=\"title\" ref={register({ required: true })}  value={task.title} type=\"text\" placeholder=\"Enter Title of Task\"></Form.Control>\n                {errors.title && <span>This field is required</span>}\n            </Form.Group>\n\n            <Form.Group controlId=\"formSubTitle\">\n                <Form.Label>SubTitle</Form.Label>\n                <Form.Control onChange={handleInputChange} name=\"subTitle\" ref={register({ required: true })}  value={task.subTitle} type=\"text\" placeholder=\"Enter SubTitle of Task\"></Form.Control>\n                {errors.subTitle && <span>This field is required</span>}\n            </Form.Group>\n            \n            <Form.Group controlId=\"formDescription\">\n                <Form.Label>Task Description</Form.Label>\n                <Form.Control onChange={handleInputChange} name=\"text\" ref={register({ required: true })}  value={task.text} type=\"text\" placeholder=\"Enter Task Description\"></Form.Control>\n                {errors.description && <span>This field is required</span>}\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n                Creat Task\n            </Button>\n        </Form>\n    )\n}\n\nexport default CreationForm","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-board/task-board.tsx",["40"],"import React, { useState } from 'react';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport CreatTask from '../createTask/CreateTask'\nimport TaskCard from '../task-card/TaskCard'\nimport {v4 as uuid} from 'uuid';\nimport '../task-board/task-board.css'\n\nconst TaskBoard = () => {\n\n    const mockTasks = [\n        {id: uuid(), title: 'Test', subTitle: 'Test1', text: 'This is just a test1'},\n        {id: uuid(), title: 'Test2', subTitle: 'Test2', text: 'This is just a test2'}\n      ]\n      \n      const mockedColumns = {\n        new: {\n          name: 'New',\n          items: mockTasks\n        },\n        inprogress : {\n          name: 'In Progress',\n          items: []\n        }\n  \n        ,\n        inqa : {\n          name: 'In QA',\n          items: []\n        }\n        ,\n        completed : {\n          name: 'Completed',\n          items: []\n        }\n      }\n\n\nconst [columns, setColumns] = useState(mockedColumns);\n\n\nfunction addNewTask(inputs){\n    const mockData = {\n        id: uuid(),\n        title: inputs.title,\n        subTitle: inputs.subTitle,\n        text: inputs.text\n    }\n    const tempItems = [...columns['new'].items, mockData]\n    setColumns({\n        ...columns,\n        ['new'] : {\n            ...columns['new'],\n            items: tempItems\n        }})\n}\n\nfunction onDragEnd(result, columns, setColumns){\n    if(!result.destination){\n      return;\n    }\n    const {source, destination} = result;\n    if(source.droppableId !== destination.droppableId) {\n      const sourceColumn = columns[source.droppableId];\n      const destColumn = columns[destination.droppableId];\n      const sourceItems = [...sourceColumn.items];\n      const destItems = [...destColumn.items];\n      const [removed] = sourceItems.splice(source.index, 1);\n      destItems.splice(destination.index, 0, removed);\n      setColumns({\n        ...columns,\n        [source.droppableId]: {\n          ...sourceColumn,\n          items: sourceItems\n        },\n        [destination.droppableId]: {\n          ...destColumn,\n          items: destItems\n        }\n      })\n    } else {\n      const column = columns[source.droppableId];\n      const copiedItems = [...column.items];\n      const [removed] = copiedItems.splice(source.index, 1);\n      copiedItems.splice(destination.index, 0, removed);\n      setColumns({\n        ...columns,\n        [source.droppableId] : {\n          ...column,\n          items: copiedItems\n        },\n      })\n    }\n\n  }\n\n\n  return (\n    <div className=\"mainPage\">\n      <CreatTask onParentClick={addNewTask}/>\n      <DragDropContext onDragEnd={result => onDragEnd(result, columns, setColumns)}>\n        {Object.entries(columns).map(([id, column]) => {\n          return (\n            <div className=\"title\">\n              <h2>{column.name}</h2>\n            <div style={{margin: 8}}>\n            <Droppable droppableId={id} key={id}>\n              {(provided, snapshot) => {\n                return (\n                  <div\n                  {...provided.droppableProps}\n                    ref={provided.innerRef}\n                    style={{\n                      background: snapshot.isDraggingOver ? 'lightblue' : 'lightgrey',\n                      padding: 4,\n                      width: 250,\n                      minHeight: 500\n                    }}>\n                      {(column.items as any[]).map((item, index) => {\n                        return (\n                          <Draggable key={item.id} draggableId={item.id} index={index}>\n                            {(provided, snapshot) => {\n                              return (\n                                <div className=\"taskDisplay\" ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                style={{\n                                  userSelect: 'none',\n                                  // backgroundColor: snapshot.isDragging ? '#263B4A' : '#456C86',\n                                  ...provided.draggableProps.style\n                                }}>\n                                <TaskCard item={item} column={column.name}></TaskCard>\n                                </div>\n                              )\n                            }}\n                          </Draggable>\n                        )\n                      })}  \n                      {provided.placeholder}\n                  </div>\n                )\n              }}\n            </Droppable>\n            </div>\n            </div>\n          )\n        })}\n      </DragDropContext>\n    </div>\n  );\n}\n\nexport default TaskBoard","/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-card/TaskCard.tsx",[],"/Users/josemeono/Documents/WORKSPACE/taskboardproject/src/components/task-details-page/TaskDetailsPage.tsx",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":5,"column":15,"nodeType":"47","messageId":"48","endLine":5,"endColumn":19},{"ruleId":"49","severity":1,"message":"50","line":51,"column":9,"nodeType":"51","messageId":"52","endLine":54,"endColumn":10,"fix":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"@typescript-eslint/no-unused-vars","'uuid' is defined but never used.","Identifier","unusedVar","no-useless-computed-key","Unnecessarily computed property ['new'] found.","Property","unnecessarilyComputedProperty",{"range":"56","text":"57"},"no-global-assign","no-unsafe-negation",[1226,1233],"'new'"]